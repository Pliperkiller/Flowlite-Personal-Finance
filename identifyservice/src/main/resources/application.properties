# ===========================================
# CONFIGURACIÓN DE LA APLICACIÓN
# ===========================================
spring.application.name=identifyservice
server.port=8080

# Configuración para ngrok (detectar HTTPS automáticamente)
server.forward-headers-strategy=framework
server.use-forward-headers=true

# ===========================================
# CONFIGURACIÓN DE JWT
# ===========================================
security.jwt.secret=${JWT_SECRET:mi_clave_super_secreta_de_32_caracteres_minimo_123456789}
security.jwt.expiration=86400000

# ===========================================
# CONFIGURACIÓN DE SWAGGER/OPENAPI
# ===========================================
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.try-it-out-enabled=true


# ===========================================
# CONFIGURACIÓN DE LA BASE DE DATOS
# ===========================================
spring.datasource.url=jdbc:mysql://localhost:3306/auth?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=Flowlite10+
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true


# ======================
# GOOGLE OAUTH2
# ======================
spring.security.oauth2.client.registration.google.client-id=679071626695-l5pqvg0kf0uqmu2rtse6621qilnl834p.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Configuración para forzar HTTPS en OAuth2
spring.security.oauth2.client.registration.google.client-authentication-method=post
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# ======================
# GITHUB OAUTH2
# ======================
#spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
#spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
#spring.security.oauth2.client.registration.github.scope=read:user,user:email
#spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# ======================
# MICROSOFT OAUTH2
# (requiere proveedor explícito porque no viene predefinido en Spring)
# ======================
#spring.security.oauth2.client.registration.microsoft.client-id=${MICROSOFT_CLIENT_ID}
#spring.security.oauth2.client.registration.microsoft.client-secret=${MICROSOFT_CLIENT_SECRET}
#spring.security.oauth2.client.registration.microsoft.scope=openid,profile,email
#spring.security.oauth2.client.registration.microsoft.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.microsoft.provider=microsoft

#spring.security.oauth2.client.provider.microsoft.authorization-uri=https://login.microsoftonline.com/common/oauth2/v2.0/authorize
#spring.security.oauth2.client.provider.microsoft.token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
#spring.security.oauth2.client.provider.microsoft.user-info-uri=https://graph.microsoft.com/oidc/userinfo
#spring.security.oauth2.client.provider.microsoft.user-name-attribute=sub

# =========================
# Facebook (predefinido)
# =========================
#spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID}
#spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET}
#spring.security.oauth2.client.registration.facebook.scope=email,public_profile
#spring.security.oauth2.client.registration.facebook.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
