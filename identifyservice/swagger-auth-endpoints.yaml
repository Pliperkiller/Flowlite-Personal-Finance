openapi: 3.0.3
info:
  title: Identity Service - Authentication API
  description: |
    API para autenticación de usuarios con soporte para:
    - Registro de usuarios tradicional
    - Login con credenciales
    - Autenticación OAuth2 con Google
    - Generación de JWT tokens
  version: 1.0.0
  contact:
    name: Identity Service Team
    email: support@identifyservice.com

servers:
  - url: http://localhost:8080
    description: Servidor de desarrollo local

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Registrar nuevo usuario
      description: |
        Crea una nueva cuenta de usuario con email, username y contraseña.
        Devuelve un JWT token para autenticación.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              example1:
                summary: Registro básico
                value:
                  username: "johndoe"
                  email: "john@example.com"
                  password: "SecurePassword123"
      responses:
        '200':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  summary: Registro exitoso
                  value:
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Error en la petición
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailExists:
                  summary: Email ya registrado
                  value:
                    error: "El email ya está registrado"
                usernameExists:
                  summary: Username ya en uso
                  value:
                    error: "El username ya está en uso"
                validationError:
                  summary: Error de validación
                  value:
                    error: "Datos de entrada inválidos"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Iniciar sesión
      description: |
        Autentica un usuario existente con username/email y contraseña.
        Devuelve un JWT token para autenticación.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              example1:
                summary: Login con username
                value:
                  username: "johndoe"
                  password: "SecurePassword123"
              example2:
                summary: Login con email
                value:
                  username: "john@example.com"
                  password: "SecurePassword123"
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  summary: Login exitoso
                  value:
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Credenciales incorrectas
                  value:
                    error: "Credenciales inválidas"
        '400':
          description: Error en la petición
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oauth2/authorization/google:
    get:
      tags:
        - OAuth2
      summary: Iniciar autenticación OAuth2 con Google
      description: |
        Inicia el flujo de autenticación OAuth2 con Google.
        Redirige al usuario a Google para autorización.
        Después de autorizar, Google redirige de vuelta con un código de autorización.
      operationId: initiateGoogleOAuth2
      responses:
        '302':
          description: Redirección a Google para autorización
          headers:
            Location:
              description: URL de autorización de Google
              schema:
                type: string
                example: "https://accounts.google.com/oauth/authorize?client_id=..."
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login/oauth2/code/google:
    get:
      tags:
        - OAuth2
      summary: Callback de OAuth2 Google
      description: |
        Endpoint de callback que Google llama después de la autorización.
        Procesa el código de autorización y genera un JWT token.
        Este endpoint es llamado automáticamente por Google, no por el cliente.
      operationId: handleGoogleOAuth2Callback
      parameters:
        - name: code
          in: query
          description: Código de autorización de Google
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: Estado para prevenir ataques CSRF
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Autenticación OAuth2 exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  summary: OAuth2 exitoso
                  value:
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Error en el código de autorización
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: Nombre de usuario único
          minLength: 3
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          description: Dirección de correo electrónico
          example: "john@example.com"
        password:
          type: string
          description: Contraseña del usuario
          minLength: 6
          maxLength: 100
          example: "SecurePassword123"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username o email del usuario
          example: "johndoe"
        password:
          type: string
          description: Contraseña del usuario
          example: "SecurePassword123"

    AuthResponse:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: JWT token para autenticación
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huZG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        token_type:
          type: string
          description: Tipo de token
          example: "Bearer"
        expires_in:
          type: integer
          description: Tiempo de expiración en segundos
          example: 86400

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Mensaje de error
          example: "El email ya está registrado"
        message:
          type: string
          description: Mensaje detallado del error
          example: "El email proporcionado ya está asociado con otra cuenta"
        timestamp:
          type: string
          format: date-time
          description: Timestamp del error
          example: "2025-09-28T22:30:00Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtenido de los endpoints de autenticación.
        Incluir en el header Authorization como: "Bearer {token}"

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Endpoints para autenticación tradicional (registro y login)
  - name: OAuth2
    description: Endpoints para autenticación OAuth2 con proveedores externos
